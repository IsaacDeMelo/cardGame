<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            box-sizing: border-box;
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            background: url(https://i.pinimg.com/736x/3e/eb/14/3eeb145e19d3f235e3d647e14eea7ecf.jpg);
            background-size: contain;
            background-position: top;
            background-attachment: fixed;
        }

        .carta {
            margin: 5px;
            padding: 10px;
            border: 2px solid white;
            border-radius: 5px;
            width: 80%;
            height: 550px;
            flex-shrink: 0;
            background-color: white;
            transition: 1s all linear;
            background: url('card3.jpg');
            background-size: cover;
            background-position: center;
        }

        #cartas-container {
            display: flex;
            overflow-x: scroll;
            position: fixed;
            transition: 0.5s all linear;
            background: rgba(0, 0, 0, 1);
            top: 90%;
            width: 100%;
            align-items: end;
        }

        .campo-de-batalha {
            width: 100%;
            height: 55vh;
            background: url(https://i.etsystatic.com/18388031/r/il/5d898f/3983787500/il_fullxfull.3983787500_eebf.jpg);
            background-size: cover;
            background-position: center;
            display: flex;
            justify-content: space-around;
            align-items: center;
            flex-direction: column;
            position: relative;

            .atributosNPC {
                position: absolute;
                width: 100px;
                height: 100px;
                background-color: rgba(0, 0, 0, 0.5);
                color: white;
                left: 0;
                display: flex;
                justify-content: center;
                align-items: center;
                flex-direction: column;
                border-top-right-radius: 10px;
                border-bottom-right-radius: 10px;
                font-family: Arial, Helvetica, sans-serif;

                p {
                    margin: 0px;
                }
            }

            .atributosPlayer {
                position: absolute;
                font-family: Arial, Helvetica, sans-serif;
                width: 100px;
                height: 100px;
                background-color: rgba(0, 0, 0, 0.5);
                color: white;
                right: 0;
                display: flex;
                justify-content: center;
                align-items: center;
                flex-direction: column;
                border-top-left-radius: 10px;
                border-bottom-left-radius: 10px;
            }

            p {
                margin: 0px;
            }
        }

        .enemy {
            width: 100%;
            height: 30vh;
            display: flex;
            background: url(https://t4.ftcdn.net/jpg/08/36/75/09/360_F_836750955_LVolMx61cAuIFVBbY2ttnR9msbCvkWFv.jpg);
            background-size: cover;
            background-position: top;

            .chat-baloon {
                opacity: 0.8;
                position: absolute;
                margin: 0 auto;
                background: white;
                font-size: 0.85em;
                line-height: 1.6em;
                border-radius: 15px;

                height: auto;
                color: black;
                padding: 20px;
                margin: 30px;
            }

            .chat-baloon:after {
                /*Triangulo*/
                content: "";
                width: 0;
                height: 0;
                position: absolute;
                border-left: 20px solid transparent;
                border-right: 20px solid transparent;
                /*Faz seta "apontar para baixo. Definir o valor como 'top' fará ela "apontar para cima" */
                /*Aqui entra a cor da "aba" do balão */
                border-bottom: 20px solid white;
                top: -20px;
                /*localização. Experimente alterar para 'bottom'*/
                left: 20%;
            }

            shadow {
                display: flex;
                justify-content: center;
                align-items: flex-end;
                width: 100%;
                height: 100%;
                position: relative;
                background-color: rgba(0, 0, 0, 0.5);

                .enemyBody {
                    animation: animate 2s infinite;
                }
            }
        }

        @keyframes animate {
            0% {
                margin-top: 0px;
            }

            50% {
                margin-top: 10px;
            }

            100% {
                margin-top: 0px;
            }
        }

        /* Tela de carregamento */
        #loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background-color: black;
            background-image: url(https://imgs.search.brave.com/2ZkyuICdMZ3A-BC0iJGil04JxgAZ_Az7LFXE-MhU97U/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly9jNC53/YWxscGFwZXJmbGFy/ZS5jb20vd2FsbHBh/cGVyLzU1OS8yMzMv/MTM0L2JsYWNrLWFz/dGEtYmxhY2stY2xv/dmVyLWtpbWV0c3Ut/bm8teWFpYmEta2F0/YW5hLXN3b3JkYXJ0/b25saW5lLWhkLXdh/bGxwYXBlci1wcmV2/aWV3LmpwZw);
            background-size: cover;
            background-position: center;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .loader {
            border: 8px solid #f3f3f3;
            width: 50px;
            height: 50px;
            animation: spin 2s linear infinite;
        }

        /* From Uiverse.io by augustin_4687 */
        .button {
            --stone-50: #fafaf9;
            --stone-800: #292524;
            --yellow-400: #facc15;

            font-family: "Rubik", sans-serif;
            cursor: pointer;
            position: relative;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            line-height: 1;
            font-size: 1rem;
            border-radius: 1rem;
            outline: 2px solid transparent;
            outline-offset: 6px;
            color: var(--stone-50);

            &:active {
                outline-color: var(--yellow-400);
            }

            &:focus-visible {
                outline-color: var(--yellow-400);
                outline-style: dashed;
            }

            &::before {
                content: "";
                position: absolute;
                z-index: 0;
                height: 200%;
                max-height: 100px;
                aspect-ratio: 1;
                margin: auto;
                background: white;
                clip-path: polygon(100% 50%,
                        91.48% 56.57%,
                        97.55% 65.45%,
                        87.42% 69.07%,
                        90.45% 79.39%,
                        79.7% 79.7%,
                        79.39% 90.45%,
                        69.07% 87.42%,
                        65.45% 97.55%,
                        56.57% 91.48%,
                        50% 100%,
                        43.43% 91.48%,
                        34.55% 97.55%,
                        30.93% 87.42%,
                        20.61% 90.45%,
                        20.3% 79.7%,
                        9.55% 79.39%,
                        12.58% 69.07%,
                        2.45% 65.45%,
                        8.52% 56.57%,
                        0% 50%,
                        8.52% 43.43%,
                        2.45% 34.55%,
                        12.58% 30.93%,
                        9.55% 20.61%,
                        20.3% 20.3%,
                        20.61% 9.55%,
                        30.93% 12.58%,
                        34.55% 2.45%,
                        43.43% 8.52%,
                        50% 0%,
                        56.57% 8.52%,
                        65.45% 2.45%,
                        69.07% 12.58%,
                        79.39% 9.55%,
                        79.7% 20.3%,
                        90.45% 20.61%,
                        87.42% 30.93%,
                        97.55% 34.55%,
                        91.48% 43.43%);

                animation: star-rotate 4s linear infinite;
                opacity: 0.1;
            }

            &:hover::before {
                opacity: 1;
            }

            &>div {
                padding: 2px;
                border-radius: 1rem;
                background-color: var(--yellow-400);
                transform: translate(-4px, -4px);
                transition: all 150ms ease;
                box-shadow:
                    0.5px 0.5px 0 0 var(--yellow-400),
                    1px 1px 0 0 var(--yellow-400),
                    1.5px 1.5px 0 0 var(--yellow-400),
                    2px 2px 0 0 var(--yellow-400),
                    2.5px 2.5px 0 0 var(--yellow-400),
                    3px 3px 0 0 var(--yellow-400),
                    0 0 0 2px var(--stone-800),
                    0.5px 0.5px 0 2px var(--stone-800),
                    1px 1px 0 2px var(--stone-800),
                    1.5px 1.5px 0 2px var(--stone-800),
                    2px 2px 0 2px var(--stone-800),
                    2.5px 2.5px 0 2px var(--stone-800),
                    3px 3px 0 2px var(--stone-800),
                    3.5px 3.5px 0 2px var(--stone-800),
                    4px 4px 0 2px var(--stone-800),
                    0 0 0 4px var(--stone-50),
                    0.5px 0.5px 0 4px var(--stone-50),
                    1px 1px 0 4px var(--stone-50),
                    1.5px 1.5px 0 4px var(--stone-50),
                    2px 2px 0 4px var(--stone-50),
                    2.5px 2.5px 0 4px var(--stone-50),
                    3px 3px 0 4px var(--stone-50),
                    3.5px 3.5px 0 4px var(--stone-50),
                    4px 4px 0 4px var(--stone-50);

                .button:hover & {
                    transform: translate(0, 0);
                    box-shadow:
                        0 0 0 0 var(--yellow-400),
                        0 0 0 0 var(--yellow-400),
                        0 0 0 0 var(--yellow-400),
                        0 0 0 0 var(--yellow-400),
                        0 0 0 0 var(--yellow-400),
                        0 0 0 0 var(--yellow-400),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50);
                }

                &>div {
                    position: relative;
                    pointer-events: none;
                    border-radius: calc(1rem - 2px);
                    background-color: var(--stone-800);

                    &::before {
                        content: "";
                        position: absolute;
                        inset: 0;
                        border-radius: 1rem;
                        opacity: 0.1;
                        background-image: radial-gradient(rgb(255 255 255 / 80%) 20%,
                                transparent 20%),
                            radial-gradient(rgb(255 255 255 / 100%) 20%, transparent 20%);
                        background-position:
                            0 0,
                            4px 4px;
                        background-size: 8px 8px;
                        mix-blend-mode: hard-light;
                        box-shadow: inset 0 0 0 1px var(--stone-800);
                        animation: dots 0.4s infinite linear;
                        transition: opacity 150ms ease;
                    }

                    &>div {
                        position: relative;
                        display: flex;
                        align-items: center;
                        padding: 0.75rem 1.25rem;
                        gap: 0.25rem;
                        filter: drop-shadow(0 -1px 0 var(--stone-800));

                        &:hover {
                            filter: drop-shadow(0 -1px 0 rgba(255, 255, 255, 0.1));
                        }

                        &:active {
                            transform: translateY(2px);
                        }
                    }
                }
            }
        }

        @keyframes star-rotate {
            from {
                transform: rotate(0deg);
            }

            to {
                transform: rotate(360deg);
            }
        }

        @keyframes dots {
            0% {
                background-position:
                    0 0,
                    4px 4px;
            }

            100% {
                background-position:
                    8px 0,
                    12px 4px;
            }
        }

        @media (prefers-color-scheme: dark) {
            .button {

                &:active,
                &:focus-visible {
                    outline-color: var(--yellow-400);
                }
            }
        }


        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Esconde o conteúdo até o carregamento */
        #content {
            display: block;
            text-align: center;
            margin-top: 50px;
        }

        .menu {
            position: fixed;
            display: none; 
            justify-content: center;
            align-items: center;
            flex-direction: column;
            gap: 20px; 
            padding: 50px; 
            border-radius: 20px;
            background-color: black; 
            z-index: 100;
            
        }
    </style>
</head>

<body>
    <div class="menu" id="menu">
        <button class="button" onclick="window.location.reload()">
            <div>
                <div>
                    <div>Jogar Novamente</div>
                </div>
            </div>
        </button>
        <a href="https://docs.google.com/forms/d/e/1FAIpQLSeumiN90wlN-iBA0xcVY5qST3sya36PwOWd_25FsXUtI4WUIQ/viewform?usp=dialog">
        <button class="button">
            <div>
                <div>
                    <div>Fazer Pré Inscrição</div>
                </div>
            </div>
        </button>
    </a>
    </div>
    <div id="loading-screen">
        <div class="loader"></div>
    </div>
    <div class="enemy">
        <shadow>
            <div class="chat-baloon" id="chat-baloon">. . . . . . . . </div>
            <div style="height: 100%; display: flex; ">
                <img id="enemyBody" class="enemyBody" src="<%=Dio.aparencia%>" width="180px;">
            </div>
        </shadow>
    </div>
    <div id="campo-de-batalha" class="campo-de-batalha">
        <div class="atributosPlayer" id="atributosPlayer"></div>
        <div class="atributosNPC" id="atributosNPC"></div>
        <div id="card-npc" style="width: 75px; height: 100px; background-color: rgba(0, 0, 0, 0.5);">

        </div>
        <div id="card-player"
            style="width: 75px; height: 100px; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; flex-direction: column;">

        </div>
    </div>
    <div id="cartas-container">
        <!-- data-id -->
    </div>

    <script>
        let endBattle = false;
        window.addEventListener('wheel', function (event) {
            // Verifica se a rolagem é vertical (para cima/baixo)
            if (event.deltaY !== 0) {
                // Se o scroll for vertical (Y), impede o comportamento de recarregar
                event.preventDefault();
            }
        }, { passive: false });
        let rodada = false;
        let playerTurn = null;
        let npcFala = null;

        window.addEventListener('load', function () {
            npcFala = document.getElementById("chat-baloon")
            setTimeout(() => {
                const loadingScreen = document.getElementById('loading-screen');

                // Esconde a tela de carregamento e mostra o conteúdo
                loadingScreen.style.display = 'none';
                var quemComeca = Math.random() < 0.5 ? "Sou Eu!" : "É Você";

                // Atualiza o conteúdo do elemento com o ID "turno"

                npcFala.innerHTML = "Quem começa jogando... " + quemComeca + "!";

                if (quemComeca == "Sou Eu!") {
                    console.log(quemComeca)
                    playerTurn = false;
                } else {
                    playerTurn = true;
                }

            }, 1000);
            setTimeout(() => {
                startBattle();
            }, 2000);
        });



        function NPCaction(NPC, Player, Espaçop1, EspaçoNPC) {

            if (NPC.vida > 0 && Player.vida > 0) {
                if (NPC.vida < 200) {
                    document.getElementById('enemyBody').src = NPC.aparencia2
                    console.log(NPC.aparencia2);
                    const frases = [
                        "JOGUE! JOGUE! JOGUE!",
                        "Agora VOCÊ me irritou!",
                        "INUTIL! INUTIL! INUTIL!",
                        "NÃO ME FAÇA RIR",
                        "É TUDO O QUE TEM?",
                    ];
                    const indiceAleatorio = Math.floor(Math.random() * frases.length);
                    npcFala.innerHTML = frases[indiceAleatorio];
                } else {
                    if (NPC.vida > Player.vida) {
                        const frases = [
                            "HAHAHAHA, Você é horrível!",
                            "A vitória se aproxima de Dio!",
                            "Eu vou te derrotar em breve!"
                        ];
                        setTimeout(() => {
                            const indiceAleatorio = Math.floor(Math.random() * frases.length);

                            npcFala.innerHTML = frases[indiceAleatorio];
                            if (playerTurn == true && EspaçoNPC == null) {
                                npcFala.innerHTML = "Vamos, jogue!";
                            } else if (playerTurn == true && EspaçoNPC != null) {
                                npcFala.innerHTML = "Vamos, é sua vez!";
                            }

                        }, 2000);
                    } else if (NPC.vida < Player.vida) {
                        const frases = [
                            "Droga.. Estou perdendo!",
                            "A vitória parece distante.",
                            "Que bela jogada..."
                        ];
                        const indiceAleatorio = Math.floor(Math.random() * frases.length);
                        npcFala.innerHTML = frases[indiceAleatorio];
                        setTimeout(() => {
                            if (playerTurn == true && EspaçoNPC == null) {
                                npcFala.innerHTML = "Vamos, Jogue! seu Lixo!";
                            } else if (playerTurn == true && EspaçoNPC != null) {
                                npcFala.innerHTML = "Vamos, é sua vez, HORRIVEL!";
                            }

                        }, 4000);
                    } else {
                        const frases = [
                            "Nada mal..",
                            "Você não é tão ruim!",
                            "Sorte de Principiante."
                        ];
                        const indiceAleatorio = Math.floor(Math.random() * frases.length);
                        npcFala.innerHTML = frases[indiceAleatorio];
                        setTimeout(() => {
                            if (playerTurn == true && EspaçoNPC == null) {
                                npcFala.innerHTML = "Vamos, jogue!";
                            } else if (playerTurn == true && EspaçoNPC != null) {
                                npcFala.innerHTML = "Vamos, é sua vez!";
                            }
                        }, 4000);
                    }
                }

            } else {
                endBattle = true;
                setTimeout(() => {
                    document.getElementById("menu").style.display = "flex";
                }, 2000);
            }
            if (Player.vida <= 0 && NPC.vida <= 0) {

                if (playerTurn) {
                    const frases = [
                        "HAHAHAHA, perdedor!",
                        "A VITÓRIA É MINHA!",
                        "Patético!"
                    ];
                    setTimeout(() => {
                        const indiceAleatorio = Math.floor(Math.random() * frases.length);

                        npcFala.innerHTML = frases[indiceAleatorio];
                    });
                } else {
                    const frases = [
                        "Oh, você venceu.",
                        "Parabéns pela vitória!",
                        "Foi um honra, vamos repetir!"
                    ];
                    setTimeout(() => {
                        const indiceAleatorio = Math.floor(Math.random() * frases.length);

                        npcFala.innerHTML = frases[indiceAleatorio];
                    });
                }
            }
            if (Player.vida > 0 && NPC.vida <= 0) {
                const frases = [
                    "Oh, você venceu.",
                    "Parabéns pela vitória!",
                    "Foi um honra, vamos repetir!"
                ];
                setTimeout(() => {
                    const indiceAleatorio = Math.floor(Math.random() * frases.length);

                    npcFala.innerHTML = frases[indiceAleatorio];
                });
            }
            if (Player.vida <= 0 && NPC.vida > 0) {
                const frases = [
                    "HAHAHAHA, perdedor!",
                    "A VITÓRIA É MINHA!",
                    "Patético!"
                ];
                setTimeout(() => {
                    const indiceAleatorio = Math.floor(Math.random() * frases.length);

                    npcFala.innerHTML = frases[indiceAleatorio];
                });
            }
        }
        function startBattle() {
            if (playerTurn != null) {


                let CartaPlayer;
                let CartaNPC;
                let AtributosNPC;
                let AtributosPlayer;
                let startY = 0;  // Armazena a posição inicial Y
                let movedDistance = 0;  // Distância movida até agora

                document.body.addEventListener('keydown', (e) => {
                    if (CartaPlayer != null && CartaNPC != null) {
                        turno(CartaPlayer, CartaNPC, AtributosPlayer, AtributosNPC)
                        NPCaction(AtributosNPC, AtributosPlayer, CartaNPC, CartaPlayer)
                        CartaPlayer = null;
                        CartaNPC = null;
                    }

                })
                setInterval(() => {
                    if (CartaPlayer != null && CartaNPC != null && rodada == false) {
                        rodada = true;
                        setTimeout(() => {
                            turno(CartaPlayer, CartaNPC, AtributosPlayer, AtributosNPC)
                            NPCaction(AtributosNPC, AtributosPlayer, CartaPlayer, CartaNPC)
                            CartaPlayer = null;
                            CartaNPC = null;
                            rodada = false;
                        }, 3000);
                    }
                }, 100);

                // Seleciona o evento touchstart
                document.body.addEventListener('touchstart', function (event) {
                    // Obtém a posição do toque inicial (em pixels)
                    startY = event.touches[0].clientY;
                    movedDistance = 0;  // Reinicia a distância movida
                });

                // Seleciona o evento touchmove
                document.body.addEventListener('touchmove', function (event) {

                    // Calcula a distância movida no eixo Y
                    const currentY = event.touches[0].clientY;
                    movedDistance = startY - currentY;  // Distância movida (em pixels)
                    // Verifica se o movimento foi maior que 10 cm (aproximadamente 378 pixels)
                    if (movedDistance >= 178) {
                        document.getElementById('cartas-container').style.top = "20%"
                        console.log("cimaaa")
                    } else if (movedDistance <= -178) {
                        console.log("baixooo")
                        document.getElementById('cartas-container').style.top = "90%"
                    }
                });

                // Seleciona o evento touchend
                document.body.addEventListener('touchend', function (event) {
                });
                function danoFixoPorTurno(p, p2) {
                    if (p.envenenado.veneno == true) {
                        p.vida += p.envenenado.dano;
                        console.log("vida tirada")
                        console.log(p.envenenado.dano);
                    }

                    if (p2.envenenado.veneno == true) {
                        p2.vida += p2.envenenado.dano;
                        console.log("vida tirada")
                        console.log(p2.envenenado.dano);
                    }

                }



                function turno(cartaP1, cartaNPC, P1, NPC) {
                    if (endBattle == false) {
                        let trueDamageP1 = cartaP1.dano;
                        let trueDamageNPC = cartaNPC.dano;
                        if (cartaP1.tipo == 'defesa') {
                            if (cartaNPC.dano < 0) {
                                cartaNPC.dano = 0;
                            }
                        } else if (cartaNPC.tipo == 'defesa') {
                            if (cartaP1.dano < 0) {
                                cartaP1.dano = 0;
                            }

                        }
                        if (cartaP1.tipo == 'veneno') {
                            NPC.envenenado.veneno = true;
                            NPC.envenenado.dano = cartaP1.dano;
                            console.log(NPC);
                        } else if (cartaP1.tipo == 'ativada') {
                            if (cartaP1.dano > 0) {
                                P1.vida += cartaP1.dano;
                                console.log(cartaP1)
                            }
                            if (cartaP1.custoEnergia > 0) {
                                P1.energia += cartaP1.custoEnergia;
                                console.log(cartaP1)
                            }
                        } else if (cartaP1.tipo == 'ataque') {
                            P1.energia += cartaP1.custoEnergia;
                            NPC.vida += cartaP1.dano;
                        }
                        console.log(cartaNPC.tipo)
                        if (cartaNPC.tipo == 'veneno') {
                            console.log("identificamos que é do tipo veneno.")
                            P1.envenenado.veneno = true;
                            P1.envenenado.dano = cartaNPC.dano;
                            console.log(NPC);
                        } else if (cartaNPC.tipo == 'ativada') {
                            if (cartaNPC.dano > 0) {
                                NPC.vida += cartaNPC.dano;
                                console.log(cartaNPC)
                            }
                            if (cartaNPC.custoEnergia > 0) {
                                NPC.energia += cartaNPC.custoEnergia;
                                console.log(cartaNPC)
                            }
                        } else if (cartaNPC.tipo == 'ataque') {
                            NPC.energia += cartaNPC.custoEnergia;
                            console.log(P1.vida + " " + cartaNPC.dano)
                            P1.vida += cartaNPC.dano;
                        }
                        cartaP1.dano = trueDamageP1;
                        cartaNPC.dano = trueDamageNPC;
                        cartaP1 = null;
                        cartaNPC = null;
                        console.log(NPC);
                        console.log(P1);
                        document.getElementById('sub-card-npc').style.opacity = 0
                        document.getElementById('sub-card-player').style.opacity = 0
                        danoFixoPorTurno(NPC, P1)

                        if (playerTurn == false) {
                            playerTurn = true;
                        } else {
                            playerTurn = false;
                        }
                    } else {
                        playerTurn = true;
                    }
                }

                // Função para carregar cartas via AJAX
                async function carregarCartas() {
                    try {
                        // Gera um número aleatório (0 ou 1)
                        const response = await fetch('/npc'); // Faz uma requisição para a rota '/cartas'
                        const players = await response.json();
                        AtributosNPC = players.Dio;
                        AtributosPlayer = players.Player;
                        console.log(players);
                        const container = document.getElementById('cartas-container');
                        container.innerHTML = ''; // Limpa o conteúdo atual
                        let i = 3;
                        setInterval(() => {
                            console.log(playerTurn + " " + CartaNPC)
                            if (endBattle == false) {
                                if (playerTurn == false && CartaNPC == null) {
                                    playerTurn = true;
                                    setTimeout(() => {
                                        if (players.Dio.vida >= 200) {
                                            CartaNPC = players.Dio.cartas[i];
                                            console.log(players.Dio.cartas[i]);
                                            if (i < 6) {
                                                i++
                                            } else {
                                                i = 3;
                                            }
                                        } else {

                                            if (i < 6) {
                                                i++
                                            } else {
                                                i = 1;
                                            }
                                            CartaNPC = players.Dio.cartas[i];
                                            console.log(players.Dio.cartas[i]);
                                        }
                                        console.log(i);
                                        console.log(CartaNPC)

                                        document.getElementById('card-npc').innerHTML = "";
                                        document.getElementById('card-npc').innerHTML = `
                                        <div id="sub-card-npc" style=" border: 1px solid white; border-radius: 5px ;background: url(card3.jpg); background-size: cover; background-position: center; opacity: 0; transition: 1s all linear; height: 100%; width: 100%; background-color: white; display: flex; justify-content: center; align-items: center; flex-direction: column;">
                                        <div style="height: 45%; width: 90%; background-image: url(${CartaNPC.desc}); border: 1px solid white; border-radius: 5px; background-size: cover; background-position: center;"></div>
                                        <div style="height: 50%; width: 100%; background: rgba(0, 0, 0, 0.5); margin-left: 5px; margin-right: 5px; color: white;">
                                        ${CartaNPC.dano !== undefined && CartaNPC.dano < 0 && CartaNPC.dano ? `<p style="font-size: 12px; margin: 1px">${CartaNPC.dano}%💔</p>` : ``}
                                        ${CartaNPC.dano !== undefined && CartaNPC.dano > 0 && CartaNPC.dano ? `<p style="font-size: 12px; margin: 1px">${CartaNPC.dano}%❤️</p>` : ``} 
                                         ${CartaNPC.custoEnergia !== undefined && CartaNPC.custoEnergia < 0 && CartaNPC.custoEnergia ? `<p style="font-size: 12px; margin: 1px">${CartaNPC.custoEnergia}%⚡</p>` : ``}
                                        ${CartaNPC.custoEnergia !== undefined && CartaNPC.custoEnergia > 0 && CartaNPC.custoEnergia ? `<p style="font-size: 12px; margin: 1px">${CartaNPC.custoEnergia}%⚡</p>` : ``}   
                                        </div>
                                    `
                                        setTimeout(() => {
                                            document.getElementById('sub-card-npc').style.opacity = 1;
                                        }, 500);


                                    }, 1000);


                                }
                            }

                        }, 2000);
                        setInterval(() => {

                            if (CartaNPC != null && CartaPlayer != null) {

                            }
                        }, 100);
                        let vidaPlayer = players.Player.vida;
                        let energiaPlayer = players.Player.energia;
                        let vidaNPC = players.Dio.vida;
                        let energiaNPC = players.Dio.energia;
                        setInterval(() => {
                            if (energiaPlayer > players.Player.energia) {
                                energiaPlayer -= 1;
                            } else if (energiaPlayer < players.Player.energia) {
                                energiaPlayer += 1;
                            }
                            if (vidaPlayer > players.Player.vida) {
                                vidaPlayer -= 1;
                            } else if (vidaPlayer < players.Player.vida) {
                                vidaPlayer += 1;
                            }
                            if (energiaNPC > players.Dio.energia) {
                                energiaNPC -= 1;
                            } else if (energiaNPC < players.Dio.energia) {
                                energiaNPC += 1;
                            }
                            if (vidaNPC > players.Dio.vida) {
                                vidaNPC -= 1;
                            } else if (vidaNPC < players.Dio.vida) {
                                vidaNPC += 1;
                            }
                            if (players.Player.vida > 300) {
                                players.Player.vida = 300;
                            } else if (players.Player.vida < 0) {
                                players.Player.vida = 0;
                            }
                            if (players.Player.energia > 300) {
                                players.Player.energia = 300;
                            } else if (players.Player.energia < 0) {
                                players.Player.energia = 0;
                            }
                            if (players.Dio.vida > 300) {
                                players.Dio.vida = 300
                            } else if (players.Dio.vida < 0) {
                                players.Dio.vida = 0;
                            }
                            if (players.Dio.energia > 300) {
                                players.Dio.energia = 300
                            } else if (players.Dio.energia < 0) {
                                players.Dio.energia = 0;
                            }
                            const statusNPC = document.getElementById('atributosNPC');
                            statusNPC.innerHTML = `<h4 style="margin: 5px;">${players.Dio.nome}</h4>
                                                <p>${vidaNPC}❤️</p>
                                                <p>${energiaNPC}⚡</p>`

                            const statusPlayer = document.getElementById('atributosPlayer');
                            statusPlayer.innerHTML = `<h4 style="margin: 5px;">${players.Player.nome}</h4>
                                                <p>${vidaPlayer}❤️</p>
                                                <p>${energiaPlayer}⚡</p>`
                        }, 10);

                        // Adiciona cada carta ao container
                        players.Dio.cartas.forEach(carta => {

                            const cartaElemento = document.getElementById(`card-npc`);
                            cartaElemento.addEventListener('click', function () {
                                try {
                                    alert(CartaNPC.modelo);

                                } catch (error) {

                                }
                            })
                        })
                        players.Player.cartas.forEach(carta => {

                            const cartaDiv = document.createElement('div');
                            cartaDiv.className = 'carta';
                            cartaDiv.setAttribute('data-id', carta.id);
                            cartaDiv.innerHTML = `
                            <div class="shadowCard" style="border-radius: 10px; border: 2px solid black; color: white; background: rgba(0, 0, 0, 0.8); display: flex; justify-content: center; align-items: center; flex-direction: column">
                            <div class="cardIMG" style="border-radius: 10px; border: 2px solid white; width: 100%; height: 300px; background: url('${carta.desc}'); background-size: cover; background-position: center;"></div>
                            <div style="padding: 10px">
                            <pre style="font-size: 12px; text-align: center;">${carta.nome}</pre>
            ${carta.modelo ? `<p style="font-size: 11px;">${carta.modelo}</p>` : ''}
            ${carta.custoEnergia !== undefined && carta.custoEnergia < 0 ? `<p style="font-size: 12px;"><strong>Custo de Energia:</strong> ${carta.custoEnergia}%⚡</p>` : ''}
            ${carta.dano !== undefined && carta.dano < 0 && carta.dano ? `<p style="font-size: 12px;"><strong>Dano:</strong> ${carta.dano}%💔</p>` : ''}
</div></div>`;
                            container.appendChild(cartaDiv);
                            const cartaElemento = document.querySelector(`[data-id="${carta.id}"]`);
                            let startY = 0;  // Armazena a posição inicial Y
                            let movedDistance = 0;  // Distância movida até agora

                            // Seleciona o evento touchstart
                            cartaElemento.addEventListener('touchstart', function (event) {
                                // Obtém a posição do toque inicial (em pixels)
                                startY = event.touches[0].clientY;
                                movedDistance = 0;  // Reinicia a distância movida

                            });

                            // Seleciona o evento touchmove
                            cartaElemento.addEventListener('touchmove', function (event) {
                                if (endBattle == false) {
                                    if (playerTurn == true) {

                                        // Calcula a distância movida no eixo Y
                                        const currentY = event.touches[0].clientY;
                                        movedDistance = startY - currentY;  // Distância movida (em pixels)
                                        if (CartaPlayer == null) {
                                            // Verifica se o movimento foi maior que 10 cm (aproximadamente 378 pixels)
                                            if (movedDistance >= 150) {

                                                setTimeout(() => {
                                                    document.getElementById('cartas-container').style.top = "90%";
                                                }, 1000);

                                                cartaElemento.style.position = 'fixed';
                                                cartaElemento.style.left = "5%";
                                                cartaElemento.style.opacity = "0";
                                                cartaElemento.style.marginBottom = "200vh";
                                                cartaElemento.innerHTML = ""
                                                setTimeout(() => {

                                                    cartaElemento.style.marginLeft = "0px";
                                                    cartaElemento.style.marginRight = "0px";
                                                    cartaElemento.style.padding = "0px";
                                                    cartaElemento.style.width = "0px";

                                                }, 2000);
                                                setTimeout(() => {
                                                    cartaElemento.style.display = "none";
                                                }, 3000);
                                                const dataId = cartaElemento.getAttribute('data-id');
                                                players.Player.cartas.forEach(carta => {
                                                    if (carta.id == dataId) {
                                                        document.getElementById('card-player').innerHTML = "";
                                                        document.getElementById('card-player').innerHTML = `
    <div id="sub-card-player" style="border: 1px solid white; border-radius: 5px ;background: url(card3.jpg); background-size: cover; background-position: center; opacity: 0; transition: 1s all linear; height: 100%; width: 100%; background-color: white; display: flex; justify-content: center; align-items: center; flex-direction: column;">
    <div style="height: 45%; width: 90%; background-image: url(${carta.desc}); background-size: cover; background-position: center; border: 1px solid white; border-radius: 5px;"></div>
    <div style="height: 50%; width: 100%;  background: rgba(0, 0, 0, 0.5); margin-left: 5px; margin-right: 5px; color: white;">
    ${carta.dano !== undefined && carta.dano < 0 && carta.dano ? `<p style="font-size: 12px; margin: 1px">${carta.dano}%💔</p>` : ``}
    ${carta.dano !== undefined && carta.dano > 0 && carta.dano ? `<p style="font-size: 12px; margin: 1px">${carta.dano}%❤️</p>` : ``} 
     ${carta.custoEnergia !== undefined && carta.custoEnergia < 0 && carta.custoEnergia ? `<p style="font-size: 12px; margin: 1px">${carta.custoEnergia}%⚡</p>` : ``}
    ${carta.custoEnergia !== undefined && carta.custoEnergia > 0 && carta.custoEnergia ? `<p style="font-size: 12px; margin: 1px">${carta.custoEnergia}%⚡</p>` : ``}   
    </div>
`
                                                        setTimeout(() => {
                                                            document.getElementById('sub-card-player').style.opacity = 1;
                                                            CartaPlayer = carta;
                                                            playerTurn = false;
                                                        }, 500);

                                                    }
                                                });
                                            }
                                        }
                                    }
                                }
                            });
                            cartaElemento.addEventListener('touchend', function (event) {

                            });

                        });
                    } catch (error) {
                        console.error('Erro ao carregar cartas:', error);
                    }
                }
                carregarCartas();
            }
        }

        // i = 0 
        ;
    </script>
</body>

</html> 