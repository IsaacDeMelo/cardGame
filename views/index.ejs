<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            overflow: hidden;
            box-sizing: border-box;
            font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            box-sizing: border-box;

            margin: 0;

            background: url(https://i.pinimg.com/736x/cc/71/6d/cc716da5427b999ca61a0f5af5457bbb.jpg);
            background-size: contain;
            background-position: top;
            background-attachment: fixed;
        }

        .carta {
            margin: 5px;
            padding: 10px;
            border: 2px solid white;
            border-radius: 5px;
            width: 80%;
            height: 550px;
            flex-shrink: 0;
            background-color: white;
            transition: 1s all linear;
            background: url('card3.jpg');
            background-size: cover;
            background-position: center;
        }

        #cartas-container {
            display: flex;
            overflow-x: scroll;
            position: fixed;
            transition: 0.5s all linear;
            background: rgba(0, 0, 0, 0.8);
            top: 90%;
            width: 100%;
            align-items: end;
        }

        .campo-de-batalha {
            border-top: 1px solid black;
            border-bottom: 1px solid black;
            width: 100%;
            height: 55vh;
            background: url(https://i.etsystatic.com/18388031/r/il/5d898f/3983787500/il_fullxfull.3983787500_eebf.jpg);
            background-size: cover;
            background-position: center;
            display: flex;
            justify-content: space-around;
            align-items: center;
            flex-direction: column;
            position: relative;

            .atributosNPC {
                position: absolute;
                padding: 10px;
                background-color: black;
                color: green;
                left: 0;
                display: flex;
                justify-content: center;
                align-items: center;
                flex-direction: column;
                border-top: 5px solid white;
                border-right: 5px solid rgb(194, 194, 194);
                border-left: 5px solid rgb(194, 194, 194);
                border-radius: 10px;
                border-bottom: 5px solid gray;
                font-family: Arial, Helvetica, sans-serif;

                p {
                    margin: 0px;
                }
            }
        }

        .enemy {
            width: 100%;
            height: 30vh;
            display: flex;
            background: url(https://www.shutterstock.com/image-illustration/field-flowing-stream-beautiful-natural-600nw-2428964117.jpg);
            background-size: cover;
            background-position: top;

            .chat-baloon {
                opacity: 0.8;
                position: absolute;
                margin: 0 auto;
                background: white;
                font-size: 0.85em;
                line-height: 1.6em;
                border-radius: 15px;

                height: auto;
                color: black;
                padding: 10px;
                margin: 30px;
            }

            .chat-baloon:after {
                /*Triangulo*/
                content: "";
                width: 0;
                height: 0;
                position: absolute;
                border-left: 20px solid transparent;
                border-right: 20px solid transparent;
                /*Faz seta "apontar para baixo. Definir o valor como 'top' fará ela "apontar para cima" alert(*/
                /*Aqui entra a cor da "aba" do balão */
                border-bottom: 20px solid white;
                top: -20px;
                /*localização. Experimente alterar para 'bottom'*/
                left: 20%;
            }

            shadow {
                display: flex;
                justify-content: center;
                align-items: flex-end;
                width: 100%;
                height: 100%;
                position: relative;
                background-color: rgba(0, 0, 0, 0.5);

                .enemyBody {
                    animation: animate 2s infinite;
                }
            }
        }

        @keyframes animate {
            0% {
                margin-top: 0px;
            }

            50% {
                margin-top: 10px;
            }

            100% {
                margin-top: 0px;
            }
        }

        /* Tela de carregamento */
        #loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background-color: black;
            background-image: url(loading.jpg);
            background-size: cover;
            background-position: center;
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .loader {
            border-left: 8px solid rgb(20, 15, 15);
            border-right: 8px solid rgb(150, 6, 6);
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }

        /* From Uiverse.io by augustin_4687 box-shadow */
        .button {
            --stone-50: #fafaf9;
            --stone-800: #292524;
            --yellow-400: #facc15;

            font-family: "Rubik", sans-serif;
            cursor: pointer;
            position: relative;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            line-height: 1;
            font-size: 1rem;
            border-radius: 1rem;
            outline: 2px solid transparent;
            outline-offset: 6px;
            color: var(--stone-50);

            &:active {
                outline-color: var(--yellow-400);
            }

            &:focus-visible {
                outline-color: var(--yellow-400);
                outline-style: dashed;
            }

            &::before {
                content: "";
                position: absolute;
                z-index: 0;
                height: 200%;
                max-height: 100px;
                aspect-ratio: 1;
                margin: auto;
                background: white;
                clip-path: polygon(100% 50%,
                        91.48% 56.57%,
                        97.55% 65.45%,
                        87.42% 69.07%,
                        90.45% 79.39%,
                        79.7% 79.7%,
                        79.39% 90.45%,
                        69.07% 87.42%,
                        65.45% 97.55%,
                        56.57% 91.48%,
                        50% 100%,
                        43.43% 91.48%,
                        34.55% 97.55%,
                        30.93% 87.42%,
                        20.61% 90.45%,
                        20.3% 79.7%,
                        9.55% 79.39%,
                        12.58% 69.07%,
                        2.45% 65.45%,
                        8.52% 56.57%,
                        0% 50%,
                        8.52% 43.43%,
                        2.45% 34.55%,
                        12.58% 30.93%,
                        9.55% 20.61%,
                        20.3% 20.3%,
                        20.61% 9.55%,
                        30.93% 12.58%,
                        34.55% 2.45%,
                        43.43% 8.52%,
                        50% 0%,
                        56.57% 8.52%,
                        65.45% 2.45%,
                        69.07% 12.58%,
                        79.39% 9.55%,
                        79.7% 20.3%,
                        90.45% 20.61%,
                        87.42% 30.93%,
                        97.55% 34.55%,
                        91.48% 43.43%);

                animation: star-rotate 4s linear infinite;
                opacity: 0.1;
            }

            &:hover::before {
                opacity: 1;
            }

            &>div {
                padding: 2px;
                border-radius: 1rem;
                background-color: var(--yellow-400);
                transform: translate(-4px, -4px);
                transition: all 150ms ease;
                box-shadow:
                    0.5px 0.5px 0 0 var(--yellow-400),
                    1px 1px 0 0 var(--yellow-400),
                    1.5px 1.5px 0 0 var(--yellow-400),
                    2px 2px 0 0 var(--yellow-400),
                    2.5px 2.5px 0 0 var(--yellow-400),
                    3px 3px 0 0 var(--yellow-400),
                    0 0 0 2px var(--stone-800),
                    0.5px 0.5px 0 2px var(--stone-800),
                    1px 1px 0 2px var(--stone-800),
                    1.5px 1.5px 0 2px var(--stone-800),
                    2px 2px 0 2px var(--stone-800),
                    2.5px 2.5px 0 2px var(--stone-800),
                    3px 3px 0 2px var(--stone-800),
                    3.5px 3.5px 0 2px var(--stone-800),
                    4px 4px 0 2px var(--stone-800),
                    0 0 0 4px var(--stone-50),
                    0.5px 0.5px 0 4px var(--stone-50),
                    1px 1px 0 4px var(--stone-50),
                    1.5px 1.5px 0 4px var(--stone-50),
                    2px 2px 0 4px var(--stone-50),
                    2.5px 2.5px 0 4px var(--stone-50),
                    3px 3px 0 4px var(--stone-50),
                    3.5px 3.5px 0 4px var(--stone-50),
                    4px 4px 0 4px var(--stone-50);

                .button:hover & {
                    transform: translate(0, 0);
                    box-shadow:
                        0 0 0 0 var(--yellow-400),
                        0 0 0 0 var(--yellow-400),
                        0 0 0 0 var(--yellow-400),
                        0 0 0 0 var(--yellow-400),
                        0 0 0 0 var(--yellow-400),
                        0 0 0 0 var(--yellow-400),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 2px var(--stone-800),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50),
                        0 0 0 4px var(--stone-50);
                }

                &>div {
                    position: relative;
                    pointer-events: none;
                    border-radius: calc(1rem - 2px);
                    background-color: var(--stone-800);

                    &::before {
                        content: "";
                        position: absolute;
                        inset: 0;
                        border-radius: 1rem;
                        opacity: 0.1;
                        background-image: radial-gradient(rgb(255 255 255 / 80%) 20%,
                                transparent 20%),
                            radial-gradient(rgb(255 255 255 / 100%) 20%, transparent 20%);
                        background-position:
                            0 0,
                            4px 4px;
                        background-size: 8px 8px;
                        mix-blend-mode: hard-light;
                        box-shadow: inset 0 0 0 1px var(--stone-800);
                        animation: dots 0.4s infinite linear;
                        transition: opacity 150ms ease;
                    }

                    &>div {
                        position: relative;
                        display: flex;
                        align-items: center;
                        padding: 0.75rem 1.25rem;
                        gap: 0.25rem;
                        filter: drop-shadow(0 -1px 0 var(--stone-800));

                        &:hover {
                            filter: drop-shadow(0 -1px 0 rgba(255, 255, 255, 0.1));
                        }

                        &:active {
                            transform: translateY(2px);
                        }
                    }
                }
            }
        }

        @keyframes star-rotate {
            from {
                transform: rotate(0deg);
            }

            to {
                transform: rotate(360deg);
            }
        }

        @keyframes dots {
            0% {
                background-position:
                    0 0,
                    4px 4px;
            }

            100% {
                background-position:
                    8px 0,
                    12px 4px;
            }
        }

        @media (prefers-color-scheme: dark) {
            .button {

                &:active,
                &:focus-visible {
                    outline-color: var(--yellow-400);
                }
            }
        }


        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Esconde o conteúdo até o carregamento */
        #content {
            display: block;
            text-align: center;
            margin-top: 50px;
        }

        .menu {
            position: absolute;
            display: flex;
            opacity: 1;
            transition: 0.5s all linear;
            width: 100%;
            height: 100%;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            border-radius: 20px;
            z-index: 99;

            button {
                font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                padding: 10px;
                margin: 10px;
                border-radius: 5px;
                font-weight: bold;
                color: #292524;
                border: 2px solid white;
                background-color: rgb(253, 253, 131);

            }
        }
    </style>
</head>

<body>
    <div class="menu" id="menu">

        <img class="image" src="https://upload.wikimedia.org/wikipedia/en/8/8a/AstaWSJIssue362015.png" width="60%">
        <div class=""
            style="font-size: 13px; font-weight: 200; display: flex; justify-content: center; align-items: center; flex-direction: column; padding: 20px; box-sizing: border-box; border-top: 5px solid rgb(22, 22, 22);  width: 100%;height: 60%; background-color: rgb(31, 31, 31); color: rgb(253, 253, 131);"
            id="silvaSpeak"> </div>
        <!-- <button class="button" onclick="window.location.reload() turn"> 
            <div>
                <div>
                    <div>Jogar Novamente</div>
                </div>
            </div>
        </button>
        <a
            href="https://docs.google.com/forms/d/e/1FAIpQLSeumiN90wlN-iBA0xcVY5qST3sya36PwOWd_25FsXUtI4WUIQ/viewform?usp=dialog">
            <button class="button">
                <div>
                    <div>
                        <div>Fazer Pré Inscrição</div>
                    </div>
                </div>
            </button>
        </a> -->

    </div>
    <div id="loading-screen">
        <div class="loader"></div>
    </div>
    <div id="gameContainer" style="transition: 3s all; filter: blur(7px)">
        <div class="enemy">
            <shadow style="overflow: hidden;">
                <div id="atributesNPC"
                    style="border: 2px solid black; background: url(https://i.pinimg.com/736x/bd/b6/6b/bdb66b4a9ea5cd288518e994bbe46381.jpg); background-size: cover; background-position: center; display: flex; justify-content: center; flex-direction: column; align-items: center; position: absolute; top: 0px; left: 0px; border-top-right-radius: 10px; border-bottom-right-radius: 10px;  min-width: 100px; color: white; background-color: black; ">
                    <shadow
                        style="background-color:rgba(0, 0, 0, 0.7); padding: 2.5px; display: flex; justify-content: center; align-items: center; flex-direction: column; border-top-right-radius: 10px; border-bottom-right-radius: 10px;">
                        <p style="margin: 0px;"><i>
                                <%=NPC.nome%>
                            </i></p>

                        <b id="npcLife" style="font-size: 11px; font-weight: 200; margin: 0px;">
                            <%=NPC.vida%>❤️
                        </b>
                        <b id="npcEnergy" style="font-size: 11px; font-weight: 200; margin: 0px;">
                            <%=NPC.energia%> ⚡
                        </b>

                    </shadow>
                </div>
                <div id="atributesPlayer"
                    style="border: 2px solid black; background: url(https://i.pinimg.com/736x/bd/b6/6b/bdb66b4a9ea5cd288518e994bbe46381.jpg); background-size: cover; background-position: center; display: flex; justify-content: center; flex-direction: column; align-items: center; position: absolute; top: 0px; right: 0px; border-top-left-radius: 10px; border-bottom-left-radius: 10px;  min-width: 100px; color: white; background-color: black; ">
                    <shadow
                        style="background-color:rgba(0, 0, 0, 0.7); padding: 2.5px; display: flex; justify-content: center; align-items: center; flex-direction: column; border-top-left-radius: 10px; border-bottom-left-radius: 10px;">
                        <p style="margin: 0px;"><i>
                                <%=Player.nome%>
                            </i></p>

                        <b id="playerLife" style="font-size: 11px; font-weight: 200; margin: 0px;">
                            <%=Player.vida%>❤️
                        </b>
                        <b id="playerEnergy" style="font-size: 11px; font-weight: 200; margin: 0px;">
                            <%=Player.energia%> ⚡
                        </b>

                    </shadow>
                </div>
                <div class="chat-baloon" id="chat-baloon">. . . . . . . . </div>
                <div style="height: 100%; display: flex; ">
                    <img id="enemyBody" class="enemyBody"
                        src="https://upload.wikimedia.org/wikipedia/en/8/8a/AstaWSJIssue362015.png" width="120px;">
                </div>
            </shadow>
        </div>
        <div id="campo-de-batalha" style="overflow: hidden" class="campo-de-batalha">
            <div id="card-npc-old"
                style="filter: grayscale(100%); position: absolute; left: 20px; width: 80px; border: 2px solid black; height: 130px; background-color: rgba(0, 0, 0, 0.5);">
            </div>
            <div id="card-player-old"
                style="filter: grayscale(100%); position: absolute; right: 20px;  width: 80px; border-radius: 5px; border: 2px solid black; height: 130px; background-color: rgba(0, 0, 0, 0.5);">
            </div>
            <div id="card-npc"
                style="position: relative; width: 80px; border-radius: 5px; border: 2px solid black; height: 130px; background-color: rgba(0, 0, 0, 0.5);">
            </div>


            <div id="card-player"
                style="position: relative; width: 80px; height: 130px; border-radius: 5px; border: 2px solid black; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; flex-direction: column;">

            </div>
        </div>
        <div id="cartas-container">
            <!-- data-id Life-->
        </div>
    </div>

    <script>
        let idDasCartasQueForamJogadas = [];
        let cooldown = true;
        let endBattle = false;
        let playerwin;
        let rodada = false;
        let playerTurn = null;
        let npcFala = null;

        function endGame(message) {
            endBattle = true;
            setTimeout(() => {
                document.getElementById("menu").style.display = "flex";
                document.getElementById("gameContainer").style.filter = "blur(7px)";
                setTimeout(() => {
                    document.getElementById("menu").style.opacity = 1;
                    document.getElementById("silvaSpeak").innerHTML = message;
                }, 1000);
            }, 1000);
        }

        function nextStep() {
            document.getElementById('menu').style.opacity = 0;
            document.getElementById('gameContainer').style.filter = "none";
            setTimeout(() => {
                document.getElementById('silvaSpeak').innerHTML = "";
                document.getElementById('menu').style.display = "none";
            }, 2000);
        }
        function typingEffect(elementId, text, speed) {
            const element = document.getElementById(elementId);
            let i = 0;

            function type() {
                if (i < text.length) {
                    element.innerHTML += text.charAt(i);  // Adiciona uma letra
                    i++;
                    setTimeout(type, speed);  // Chama a função novamente após o intervalo de tempo cartasEm
                }
            }

            type();
        }

        window.addEventListener('load', function () {
            npcFala = document.getElementById("chat-baloon")
            setTimeout(() => {
                // Esconde a tela de carregamento e mostra o conteúdo
                var quemComeca = Math.random() < 0.5 ? "Sou Eu!" : "É Você";
                // Atualiza o conteúdo do elemento com o ID "turno"
                npcFala.innerHTML = "Quem começa jogando... " + quemComeca + "!";
                if (quemComeca == "Sou Eu!") {
                    console.log(quemComeca)
                    playerTurn = false;
                } else {
                    playerTurn = true;
                }
            }, 1000);
            setTimeout(() => {
                startBattle();
            }, 2000);
        });




        function NPCaction(NPC, Player, Espaçop1, EspaçoNPC) {
            const npcFalaElement = document.getElementById('chat-baloon');
            const enemyBodyElement = document.getElementById('enemyBody');

            function setRandomPhrase(phrases, delay = 0) {
                setTimeout(() => {
                    const randomIndex = Math.floor(Math.random() * phrases.length);
                    npcFalaElement.innerHTML = phrases[randomIndex];
                }, delay);
            }

            function setDefaultPhrase(delay = 0) {
                setTimeout(() => {
                    if (playerTurn) {
                        npcFalaElement.innerHTML = EspaçoNPC ? "Sua vez!" : "Jogue!";
                    }
                }, delay);
            }



            if (NPC.vida > 0 && Player.vida > 0) {
                if (NPC.vida < 200) {

                    const phrases = [
                        "Parece que você pegou o Jeito",
                        "Vá com calma aí!",
                        "Você não era Iniciante?!",
                        "Muito bom",
                        "Wow, pega leve!",
                    ];
                    setRandomPhrase(phrases);
                    setDefaultPhrase(2000);
                } else {
                    if (NPC.vida > Player.vida) {
                        const phrases = [
                            "Vamos, você pode fazer melhor!",
                            "Não tenha medo de defender!",
                            "Já gastou suas ativações?!",
                            "Estou na vantagem",
                            "Vamos, você pode superar isso!"
                        ];
                        setRandomPhrase(phrases, 2000);
                        setDefaultPhrase(2000);
                    } else if (NPC.vida < Player.vida) {
                        const phrases = [
                            "Essa foi boa...",
                            "Tem certeza de que eu sou o professor aqui? Hahaha",
                            "Que bela jogada...",
                        ];
                        setRandomPhrase(phrases);
                        setDefaultPhrase(4000);
                    } else {
                        const phrases = [
                            "Nada mal..",
                            "Você tem potencial!",
                            "Muito bem, vamos continuar assim!"
                        ];
                        setRandomPhrase(phrases);
                        setDefaultPhrase(4000);
                    }
                }
            } else {
                if (Player.vida <= 0 && NPC.vida <= 0) {
                    const phrases = playerTurn ? [
                        "Ah, não foi dessa vez. Você perdeu.",
                        "Eu venci!",
                        "Essa foi por um triz, mas eu venci."
                    ] : [
                        "Você venceu! Muito bem!",
                        "Você mandou muito bem! ",
                        "Que pena, fui derrotado! Parabéns!"
                    ];
                    setRandomPhrase(phrases);
                    endGame(playerTurn ? "Parece que você perdeu desta vez. Você gostou do Jogo? o RPG ficará pronto em breve, e terá muitos sistemas de evolução e progressão, além de duelos contra outros jogadores. Garanto que você vai gostar! Pode fazer a pré inscrição agora, e assim você vai receber em primeira mão o link da comunidade no Whatsapp quando estiver tudo pronto! Só precisa do seu número e de como você gosta de ser chamado!  <div style='display:flex'><a href='https://docs.google.com/forms/d/e/1FAIpQLSeumiN90wlN-iBA0xcVY5qST3sya36PwOWd_25FsXUtI4WUIQ/viewform?usp=dialog'><button>Quero fazer a Pré-Inscrição!</button></a><button  onclick='window.location.reload()'>Quero tentar novamente!</button></div>" : "Você venceu! Você gostou do Jogo? o RPG ficará pronto em breve, e terá muitos sistemas de evolução e progressão, além de duelos contra outros jogadores. Garanto que você vai gostar! Pode fazer a pré inscrição agora, e assim você vai receber em primeira mão o link da comunidade no Whatsapp quando estiver tudo pronto! Só precisa do seu número e de como você gosta de ser chamado!<div style='display:flex'><a href='https://docs.google.com/forms/d/e/1FAIpQLSeumiN90wlN-iBA0xcVY5qST3sya36PwOWd_25FsXUtI4WUIQ/viewform?usp=dialog'><button>Quero fazer a Pré-Inscrição!</button></a><button  onclick='window.location.reload()'>Quero jogar novamente!</button></div>");
                } else if (Player.vida > 0 && NPC.vida <= 0) {
                    const phrases = [
                        "Nossa, você conseguiu!",
                        "Você mandou muito bem! ",
                        "Que pena, fui derrotado! Parabéns!"
                    ];
                    setRandomPhrase(phrases);
                    endGame("Você venceu! Você gostou do Jogo? o RPG ficará pronto em breve, e terá muitos sistemas de evolução e progressão, além de duelos contra outros jogadores. Garanto que você vai gostar! Pode fazer a pré inscrição agora, e assim você vai receber em primeira mão o link da comunidade no Whatsapp quando estiver tudo pronto! Só precisa do seu número e de como você gosta de ser chamado!<div style='display:flex'><a href='https://docs.google.com/forms/d/e/1FAIpQLSeumiN90wlN-iBA0xcVY5qST3sya36PwOWd_25FsXUtI4WUIQ/viewform?usp=dialog'><button>Quero fazer a Pré-Inscrição!</button></a><button  onclick='window.location.reload()'>Quero jogar novamente!</button></div>");
                } else if (Player.vida <= 0 && NPC.vida > 0) {
                    const phrases = [
                        "HAHAHAHA, perdedor!",
                        "A VITÓRIA É MINHA!",
                        "Patético!"
                    ];
                    setRandomPhrase(phrases);
                    endGame("Parece que você perdeu desta vez, por falta de cartas. Você gostou do Jogo? o RPG ficará pronto em breve, e terá muitos sistemas de evolução e progressão, além de duelos contra outros jogadores. Garanto que você vai gostar! Pode fazer a pré inscrição agora, e assim você vai receber em primeira mão o link da comunidade no Whatsapp quando estiver tudo pronto! Só precisa do seu número e de como você gosta de ser chamado!  <div style='display:flex'><a href='https://docs.google.com/forms/d/e/1FAIpQLSeumiN90wlN-iBA0xcVY5qST3sya36PwOWd_25FsXUtI4WUIQ/viewform?usp=dialog'><button>Quero fazer a Pré-Inscrição!</button></a><button  onclick='window.location.reload()'>Quero tentar novamente!</button></div>");
                }
            }
        }
        function startBattle() {
            if (playerTurn != null) {
                let cartasEmCampo = 0;
                let cartasEmCampoNPC = 0;
                let CartaPlayer;
                let CartaNPC;
                let AtributosNPC;
                let AtributosPlayer;
                let startY = 0;  // Armazena a posição inicial Y
                let movedDistance = 0;  // Distância movida até agora

                setInterval(() => {
                    if (
                        // Verifica se CartaPlayer e CartaNPC são arrays ou objetos não nulos
                        (Array.isArray(CartaPlayer) ? CartaPlayer.length > 0 : CartaPlayer != null) &&
                        (Array.isArray(CartaNPC) ? CartaNPC.length > 0 : CartaNPC != null) &&

                        // A rodada ainda não começou
                        rodada == false &&

                        // Verifica se ambos os jogadores jogaram pelo menos uma carta que não seja do tipo 'ativada'
                        (
                            (Array.isArray(CartaPlayer) ? CartaPlayer.some(carta => carta.tipo !== 'ativada') : CartaPlayer.tipo !== 'ativada') &&
                            (Array.isArray(CartaNPC) ? CartaNPC.some(carta => carta.tipo !== 'ativada') : CartaNPC.tipo !== 'ativada')
                        )
                    ) {
                        rodada = true;
                        setTimeout(() => {
                            turno(CartaPlayer, CartaNPC, AtributosPlayer, AtributosNPC)
                            NPCaction(AtributosNPC, AtributosPlayer, CartaPlayer, CartaNPC)
                            CartaPlayer = null;
                            CartaNPC = null;
                            rodada = false;
                        }, 3000);
                    }
                }, 100);

                // Seleciona o evento touchstart
                document.body.addEventListener('touchstart', function (event) {
                    // Obtém a posição do toque inicial (em pixels)
                    startY = event.touches[0].clientY;
                    movedDistance = 0;  // Reinicia a distância movida
                });

                // Seleciona o evento touchmove
                document.body.addEventListener('touchmove', function (event) {

                    // Calcula a distância movida no eixo Y
                    const currentY = event.touches[0].clientY;
                    movedDistance = startY - currentY;  // Distância movida (em pixels)
                    // Verifica se o movimento foi maior que 10 cm (aproximadamente 378 pixels)
                    if (movedDistance >= 178) {
                        document.getElementById('cartas-container').style.top = "20%"
                        console.log("cimaaa")
                    } else if (movedDistance <= -178) {
                        console.log("baixooo")
                        document.getElementById('cartas-container').style.top = "90%"
                    }
                });

                // Seleciona o evento touchend
                document.body.addEventListener('touchend', function (event) {
                });
                function danoFixoPorTurno(p, p2) {
                    if (p.envenenado.veneno == true) {
                        p.vida += p.envenenado.dano;
                    }
                    if (p2.envenenado.veneno == true) {
                        p2.vida += p2.envenenado.dano;
                    }

                }

                function aplicarEfeito(carta, cartaAlvo, jogador, inimigo) {
                    // Aplica o efeito baseado no tipo da carta
                    switch (carta.tipo) {
                        case 'defesa':
                            if (cartaAlvo.dano < 0) {
                                cartaAlvo.dano = 0;
                                jogador.energia += carta.custoEnergia;
                            }
                            break;
                        case 'veneno':
                            jogador.energia += carta.custoEnergia;
                            inimigo.envenenado = { veneno: true, dano: carta.dano };
                            break;
                        case 'ataque':
                            if (cartaAlvo.tipo != 'defesa') {
                                jogador.energia += carta.custoEnergia;
                                inimigo.vida += carta.dano;
                            }
                            break;
                        default:
                            console.warn(`Tipo de carta desconhecido: ${carta.tipo}`);
                    }

                }
                function aplicarEfeitoAtivado(carta, jogador) {
                    jogador.vida += carta.dano;
                    jogador.energia += carta.custoEnergia;
                }
                function verificarCartas(carta, cartaInimiga, jogador, inimigo) {
                    if (Array.isArray(carta)) {
                        carta.forEach(element => {
                            if (element.tipo == 'ativada') {
                                aplicarEfeitoAtivado(element, jogador);
                            } else {
                                if (Array.isArray(cartaInimiga)) {
                                    aplicarEfeito(element, cartaInimiga[cartaInimiga.length - 1], jogador, inimigo)
                                } else {
                                    aplicarEfeito(element, cartaInimiga, jogador, inimigo)
                                }
                            }
                        });
                    } else {
                        if (carta.tipo == 'ativada') {
                            aplicarEfeitoAtivado(carta, jogador);
                        } else {
                            if (Array.isArray(cartaInimiga)) {
                                aplicarEfeito(carta, cartaInimiga[cartaInimiga.length - 1], jogador, inimigo)

                            } else {
                                aplicarEfeito(carta, cartaInimiga, jogador, inimigo)
                            }
                        }
                    }
                }
                function turno(cartaP1, cartaNPC, P1, NPC) {
                    if (!endBattle) {
                        cooldown = false;
                        if (true) {
                            let trueDamageP1 = cartaP1.dano;
                            let trueDamageNPC = cartaNPC.dano;
                            verificarCartas(cartaP1, cartaNPC, P1, NPC)
                            verificarCartas(cartaNPC, cartaP1, NPC, P1);
                            cartaP1.dano = trueDamageP1;
                            cartaNPC.dano = trueDamageNPC;
                            cartasEmCampo = 0;
                            let oldCartaP1 = cartaP1;
                            let oldCartaNPC = cartaNPC;
                            //document.getElementById(`card-player-old`).innerHTML = document.getElementById(`card-player`).innerHTML;
                            //document.getElementById(`card-npc-old`).innerHTML = document.getElementById(`card-npc`).innerHTML;

                            if (Array.isArray(cartaP1)) {

                                cartaP1.forEach(element => {
                                    document.getElementById(`sub-card-player-${element.id}`).style.opacity = 0;

                                });
                            } else {

                                document.getElementById(`sub-card-player-${cartaP1.id}`).style.opacity = 0;
                            }
                            if (Array.isArray(cartaNPC)) {
                                cartaNPC.forEach(element => {
                                    document.getElementById(`sub-card-npc-${element.id}`).style.opacity = 0;

                                });
                            }
                            else {
                                document.getElementById(`sub-card-npc-${cartaNPC.id}`).style.opacity = 0;
                            }
                            let oldCardP = document.getElementById(`card-player`).innerHTML;
                            let oldCardN = document.getElementById(`card-npc`).innerHTML;
                            setTimeout(() => {
                                document.getElementById(`card-player`).innerHTML = "";
                                document.getElementById(`card-npc`).innerHTML = "";
                                document.getElementById(`card-player-old`).innerHTML = oldCardP;
                                document.getElementById(`card-npc-old`).innerHTML = oldCardN;
                                setTimeout(() => {
                                    if (Array.isArray(oldCartaP1)) {

                                        oldCartaP1.forEach(element => {
                                            document.getElementById(`sub-card-player-${element.id}`).style.opacity = 1;
                                        });
                                    } else {

                                        document.getElementById(`sub-card-player-${oldCartaP1.id}`).style.opacity = 1;
                                    }
                                    if (Array.isArray(oldCartaNPC)) {
                                        oldCartaNPC.forEach(element => {
                                            document.getElementById(`sub-card-npc-${element.id}`).style.opacity = 1;

                                        });
                                    }
                                    else {
                                        document.getElementById(`sub-card-npc-${oldCartaNPC.id}`).style.opacity = 1;
                                    }
                                }, 100);

                                cooldown = true;
                            }, 2000);
                            // Atualizar a interface (opacidade)

                            cartaP1 = null;
                            cartaNPC = null;
                            cartasEmCampo = 0;
                            cartasEmCampoNPC = 0;
                            // Chama a função que processa o dano fixo
                            danoFixoPorTurno(NPC, P1);

                            // Alterna o turno

                            playerTurn = !playerTurn;


                        } else {

                        }
                    } else {
                        playerTurn = true;
                    }
                }

                // Função para carregar cartas via AJAX
                async function carregarCartas() {
                    try {

                        // Gera um número aleatório (0 ou 1)
                        const response = await fetch('/npc'); // Faz uma requisição para a rota '/cartas'
                        if (response.ok) { // Verifica se a resposta foi bem-sucedida (status 200-299)
                            const loadingScreen = document.getElementById('loading-screen');
                            typingEffect("silvaSpeak", "Seja bem vindo, Mago! Eu sou Asta, e vou te ensinar como jogar! Basicamente, você tem cartas que pode usar contra mim no momento, cartas de Defesa, Ataque e Ativação. Você pode jogar quantas ativações quiser de uma vez, mas somente uma Defesa ou um Ataque. Para ver suas cartas, arraste o dedo para cima sobre o Campo de Batalha. Se suas cartas acabarem, você perde! Se nossas vidas cheguem a Zero ao mesmo tempo, ganhará aquele que tiver mais energia, então, cuidado! Clique sobre minha carta caso queira saber o que ela faz, e eu te explicarei. Vou pegar leve com você, não se preocupe. (Clique em qualquer lugar da tela para Jogar)", 10)
                            loadingScreen.style.display = 'none';
                            const handleClick = () => {
                                nextStep();
                                document.body.removeEventListener('click', handleClick);
                            };
                            document.body.addEventListener('click', handleClick);


                        } else {
                            console.error('Falha ao carregar os dados:', response.status, response.statusText);
                        }

                        const players = await response.json();
                        AtributosNPC = players.NPC;
                        AtributosPlayer = players.Player;
                        console.log(players);
                        const container = document.getElementById('cartas-container');
                        container.innerHTML = ''; // Limpa o conteúdo atual
                        let i = 3;
                        setInterval(() => {
                            console.log(cartasEmCampo);

                            if (endBattle == false) {
                                if (playerTurn == false) {

                                    if (
                                        (CartaNPC == null) ||  // Se CartaNPC for null
                                        (Array.isArray(CartaNPC) && CartaNPC.every(carta => carta.tipo === 'ativada'))  // Se for um array e todas as cartas forem do tipo 'ativada'
                                    ) {

                                        setTimeout(() => {


                                            if (players.NPC.energia >= -players.NPC.cartas[i].custoEnergia) {
                                                if (players.NPC.cartas[i].tipo != "ativada") {
                                                    if (!Array.isArray(CartaNPC)) {
                                                        CartaNPC = players.NPC.cartas[i];

                                                    } else {
                                                        CartaNPC.push(players.NPC.cartas[i]);

                                                    }
                                                } else {
                                                    if (!Array.isArray(CartaNPC)) {
                                                        CartaNPC = [];  // Se ainda não for um array, inicializa como array vazio
                                                    }
                                                    CartaNPC.push(players.NPC.cartas[i]);  // Adiciona a carta ao array
                                                }
                                                console.log(`Custo da carta ${-players.NPC.cartas[i].custoEnergia}. Energia ${players.NPC.energia}`);
                                                if (i < 5) {
                                                    i++
                                                } else {
                                                    i = 0;
                                                }
                                            } else {
                                                let temCartas = false;

                                                for (let i = 0; i < players.NPC.cartas.length; i++) {
                                                    if (-players.NPC.cartas[i].custoEnergia <= players.NPC.energia && players.NPC.cartas[i].tipo != 'ativada') {
                                                        temCartas = true
                                                    }
                                                }
                                                if (temCartas) {
                                                    for (let i = 0; i < players.NPC.cartas.length; i++) {
                                                        // Verifica se a energia da carta é menor ou igual ao custo de energia do NPC
                                                        if (-players.NPC.cartas[i].custoEnergia <= players.NPC.energia) {
                                                            if (players.NPC.cartas[i].tipo != "ativada") {
                                                                if (!Array.isArray(CartaNPC)) {
                                                                    CartaNPC = players.NPC.cartas[i];

                                                                } else {
                                                                    CartaNPC.push(players.NPC.cartas[i]);

                                                                }
                                                            } else {
                                                                if (!Array.isArray(CartaNPC)) {
                                                                    CartaNPC = [];  // Se ainda não for um array, inicializa como array vazio
                                                                }
                                                                CartaNPC.push(players.NPC.cartas[i]);  // Adiciona a carta ao array
                                                            }
                                                            console.log(players.NPC.cartas[i]); // Mostra no console
                                                            break
                                                            // Se encontrar uma carta válida, pode interromper o loop (se desejar)
                                                        }
                                                    }
                                                } else {
                                                    playerwin = true;
                                                    endGame("Você venceu! Você gostou do Jogo? o RPG ficará pronto em breve, e terá muitos sistemas de evolução e progressão, além de duelos contra outros jogadores. Garanto que você vai gostar! Pode fazer a pré inscrição agora, e assim você vai receber em primeira mão o link da comunidade no Whatsapp quando estiver tudo pronto! Só precisa do seu número e de como você gosta de ser chamado!<div style='display:flex'><a href='https://docs.google.com/forms/d/e/1FAIpQLSeumiN90wlN-iBA0xcVY5qST3sya36PwOWd_25FsXUtI4WUIQ/viewform?usp=dialog'><button>Quero fazer a Pré-Inscrição!</button></a><button  onclick='window.location.reload()'>Quero jogar novamente!</button></div>");

                                                }
                                            }

                                            if (Array.isArray(CartaNPC)) {
                                                CartaNPC.forEach(element => {
                                                    document.getElementById('card-npc').innerHTML += `
                                        <div id="sub-card-npc-${element.id}" style=" position: absolute; margin-left: ${cartasEmCampoNPC}px; box-shadow: black 0px 11px 20px 8px; position: absolute; border-radius: 5px ;background: url(card3.jpg); background-size: cover; background-position: center; opacity: 0; transition: 1s all linear; height: 100%; width: 100%; background-color: white; display: flex; justify-content: center; align-items: center; flex-direction: column;">
                                        <div style="height: 45%; width: 90%; background-image: url(${element.desc}); border: 1px solid black; border-radius: 5px; background-size: cover; background-position: center;"></div>
                                        <div style="height: 50%; width: 100%; background: rgba(0, 0, 0, 0.5); margin-left: 5px; margin-right: 5px; color: white;">
                                        ${element.dano !== undefined && element.dano < 0 && element.dano ? `<p style="font-size: 12px; margin: 1px">${element.dano}%💔</p>` : ``}
                                        ${element.dano !== undefined && element.dano > 0 && element.dano ? `<p style="font-size: 12px; margin: 1px">${element.dano}%❤️</p>` : ``} 
                                         ${element.custoEnergia !== undefined && element.custoEnergia < 0 && element.custoEnergia ? `<p style="font-size: 12px; margin: 1px">${element.custoEnergia}%⚡</p>` : ``}
                                        ${element.custoEnergia !== undefined && element.custoEnergia > 0 && element.custoEnergia ? `<p style="font-size: 12px; margin: 1px">${element.custoEnergia}%⚡</p>` : ``}   
                                        </div>
                                    `

                                                    setTimeout(() => {
                                                        document.getElementById(`sub-card-npc-${element.id}`).style.opacity = 1;
                                                        cartasEmCampoNPC += 20;
                                                        if (Array.isArray(CartaNPC) && CartaNPC.every(carta => carta.tipo === 'ativada')) {

                                                        } else {
                                                            playerTurn = true;
                                                        }

                                                    }, 500);
                                                });
                                            } else {
                                                document.getElementById('card-npc').innerHTML += `
                                        <div id="sub-card-npc-${CartaNPC.id}" style="box-shadow: black 0px 11px 20px 8px; position: absolute; border-radius: 5px ;background: url(card3.jpg); background-size: cover; background-position: center; opacity: 0; transition: 1s all linear; height: 100%; width: 100%; background-color: white; display: flex; justify-content: center; align-items: center; flex-direction: column;">
                                        <div style="height: 45%; width: 90%; background-image: url(${CartaNPC.desc}); border: 1px solid black; border-radius: 5px; background-size: cover; background-position: center;"></div>
                                        <div style="height: 50%; width: 100%; background: rgba(0, 0, 0, 0.5); margin-left: 5px; margin-right: 5px; color: white;">
                                        ${CartaNPC.dano !== undefined && CartaNPC.dano < 0 && CartaNPC.dano ? `<p style="font-size: 12px; margin: 1px">${CartaNPC.dano}%💔</p>` : ``}
                                        ${CartaNPC.dano !== undefined && CartaNPC.dano > 0 && CartaNPC.dano ? `<p style="font-size: 12px; margin: 1px">${CartaNPC.dano}%❤️</p>` : ``} 
                                         ${CartaNPC.custoEnergia !== undefined && CartaNPC.custoEnergia < 0 && CartaNPC.custoEnergia ? `<p style="font-size: 12px; margin: 1px">${CartaNPC.custoEnergia}%⚡</p>` : ``}
                                        ${CartaNPC.custoEnergia !== undefined && CartaNPC.custoEnergia > 0 && CartaNPC.custoEnergia ? `<p style="font-size: 12px; margin: 1px">${CartaNPC.custoEnergia}%⚡</p>` : ``}   
                                        </div>
                                    `
                                                setTimeout(() => {
                                                    document.getElementById(`sub-card-npc-${CartaNPC.id}`).style.opacity = 1;
                                                    if (Array.isArray(CartaNPC) && CartaNPC.every(carta => carta.tipo === 'ativada')) {

                                                    } else {
                                                        playerTurn = true;
                                                    }
                                                }, 500);
                                            }

                                        }, 1000);


                                    }
                                }
                            }

                        }, 2000);
                        let vidaPlayer = players.Player.vida;
                        let energiaPlayer = players.Player.energia;
                        let vidaNPC = players.NPC.vida;
                        let energiaNPC = players.NPC.energia;
                        setInterval(() => {
                            if (energiaPlayer > players.Player.energia) {
                                energiaPlayer -= 1;
                            } else if (energiaPlayer < players.Player.energia) {
                                energiaPlayer += 1;
                            }
                            if (vidaPlayer > players.Player.vida) {
                                vidaPlayer -= 1;
                            } else if (vidaPlayer < players.Player.vida) {
                                vidaPlayer += 1;
                            }
                            if (energiaNPC > players.NPC.energia) {
                                energiaNPC -= 1;
                            } else if (energiaNPC < players.NPC.energia) {
                                energiaNPC += 1;
                            }
                            if (vidaNPC > players.NPC.vida) {
                                vidaNPC -= 1;
                            } else if (vidaNPC < players.NPC.vida) {
                                vidaNPC += 1;
                            }
                            if (players.Player.vida > 300) {
                                players.Player.vida = 300;
                            } else if (players.Player.vida < 0) {
                                players.Player.vida = 0;
                            }
                            if (players.Player.energia > 300) {
                                players.Player.energia = 300;
                            } else if (players.Player.energia < 0) {
                                players.Player.energia = 0;
                            }
                            if (players.NPC.vida > 300) {
                                players.NPC.vida = 300
                            } else if (players.NPC.vida < 0) {
                                players.NPC.vida = 0;
                            }
                            if (players.NPC.energia > 300) {
                                players.NPC.energia = 300
                            } else if (players.NPC.energia < 0) {
                                players.NPC.energia = 0;
                            }

                            if (window.getComputedStyle(document.getElementById("cartas-container")).height === "0px") {
                                setTimeout(() => {
                                    if (playerTurn = true) {
                                        if (window.getComputedStyle(document.getElementById("cartas-container")).height === "0px") {
                                            setTimeout(() => {
                                                console.log("Turno: " + playerTurn + " " + playerwin);
                                            console.log(vidaNPC)
                                                if (playerTurn){

                                                }
                                                if (vidaNPC == 0) {
                                                    if (energiaNPC > energiaPlayer) {
                                                        endGame("Parece que você perdeu desta vez, por falta de cartas. Você gostou do Jogo? o RPG ficará pronto em breve, e terá muitos sistemas de evolução e progressão, além de duelos contra outros jogadores. Garanto que você vai gostar! Pode fazer a pré inscrição agora, e assim você vai receber em primeira mão o link da comunidade no Whatsapp quando estiver tudo pronto! Só precisa do seu número e de como você gosta de ser chamado!  <div style='display:flex'><a href='https://docs.google.com/forms/d/e/1FAIpQLSeumiN90wlN-iBA0xcVY5qST3sya36PwOWd_25FsXUtI4WUIQ/viewform?usp=dialog'><button>Quero fazer a Pré-Inscrição!</button></a><button  onclick='window.location.reload()'>Quero tentar novamente!</button></div>");
                                                    }
                                                    if (energiaNPC < energiaPlayer) {
                                                        playerwin = true;
                                                        endGame("Você venceu! Você gostou do Jogo? o RPG ficará pronto em breve, e terá muitos sistemas de evolução e progressão, além de duelos contra outros jogadores. Garanto que você vai gostar! Pode fazer a pré inscrição agora, e assim você vai receber em primeira mão o link da comunidade no Whatsapp quando estiver tudo pronto! Só precisa do seu número e de como você gosta de ser chamado!<div style='display:flex'><a href='https://docs.google.com/forms/d/e/1FAIpQLSeumiN90wlN-iBA0xcVY5qST3sya36PwOWd_25FsXUtI4WUIQ/viewform?usp=dialog'><button>Quero fazer a Pré-Inscrição!</button></a><button  onclick='window.location.reload()'>Quero jogar novamente!</button></div>");
                                                    }
                                                } else {    
                                                    if (playerwin == undefined){
                                                        endGame("Parece que você perdeu desta vez, por falta de cartas. Você gostou do Jogo? o RPG ficará pronto em breve, e terá muitos sistemas de evolução e progressão, além de duelos contra outros jogadores. Garanto que você vai gostar! Pode fazer a pré inscrição agora, e assim você vai receber em primeira mão o link da comunidade no Whatsapp quando estiver tudo pronto! Só precisa do seu número e de como você gosta de ser chamado!  <div style='display:flex'><a href='https://docs.google.com/forms/d/e/1FAIpQLSeumiN90wlN-iBA0xcVY5qST3sya36PwOWd_25FsXUtI4WUIQ/viewform?usp=dialog'><button>Quero fazer a Pré-Inscrição!</button></a><button  onclick='window.location.reload()'>Quero tentar novamente!</button></div>");
                                                    }
                                                }
                                               
                                                    
                                            }, 3000);

                                        }
                                    }
                                }, 3000);
                            }


                            const npcLife = document.getElementById('npcLife');
                            const npcEnergy = document.getElementById('npcEnergy');
                            const playerLife = document.getElementById('playerLife');
                            const playerEnergy = document.getElementById('playerEnergy');
                            npcLife.innerHTML = `${vidaNPC}❤️`
                            npcEnergy.innerHTML = `${energiaNPC}⚡`
                            playerLife.innerHTML = `${vidaPlayer}❤️`
                            playerEnergy.innerHTML = `${energiaPlayer}⚡`


                        }, 10);

                        // Adiciona cada carta ao container
                        players.NPC.cartas.forEach(carta => {

                            const cartaElemento = document.getElementById(`card-npc`);
                            cartaElemento.addEventListener('click', function () {
                                try {
                                    let modelo = CartaNPC.modelo;
                                    if (endBattle == false) {
                                        document.getElementById('menu').style.display = "flex";
                                        document.getElementById('gameContainer').style.filter = "blur(7px)"
                                        setTimeout(() => {
                                            document.getElementById('menu').style.opacity = 1;
                                            document.getElementById('silvaSpeak').innerHTML = `${modelo} <button class="nextButton" onclick="nextStep()">Entendi!</button>`;

                                        }, 1000);
                                    }

                                } catch (error) {

                                }
                            })
                        })









                        players.Player.cartas.forEach(carta => {

                            const cartaDiv = document.createElement('div');
                            cartaDiv.className = 'carta';
                            cartaDiv.setAttribute('data-id', carta.id);
                            cartaDiv.innerHTML = `
                            <div class="shadowCard" style="border-radius: 10px; border: 2px solid black; color: white; background: rgba(0, 0, 0, 0.8); display: flex; justify-content: center; align-items: center; flex-direction: column">
                            <div class="cardIMG" style="border-radius: 10px; border: 2px solid white; width: 100%; height: 300px; background: url('${carta.desc}'); background-size: cover; background-position: center;"></div>
                            <div style="padding: 10px">
                            <pre style="font-size: 12px; text-align: center;">${carta.nome}</pre>
            ${carta.modelo ? `<p style="font-size: 11px;">${carta.modelo}</p>` : ''}
            ${carta.custoEnergia !== undefined && carta.custoEnergia < 0 ? `<p style="font-size: 12px;"><strong>Custo de Energia:</strong> ${carta.custoEnergia}%⚡</p>` : ''}
            ${carta.dano !== undefined && carta.dano < 0 && carta.dano ? `<p style="font-size: 12px;"><strong>Dano:</strong> ${carta.dano}%💔</p>` : ''}
</div></div>`;
                            container.appendChild(cartaDiv);
                            const cartaElemento = document.querySelector(`[data-id="${carta.id}"]`);
                            let startY = 0;  // Armazena a posição inicial Y
                            let movedDistance = 0;  // Distância movida até agora

                            // Seleciona o evento touchstart
                            cartaElemento.addEventListener('touchstart', function (event) {
                                // Obtém a posição do toque inicial (em pixels)
                                startY = event.touches[0].clientY;
                                movedDistance = 0;  // Reinicia a distância movida

                            });

                            // Seleciona o evento touchmove
                            cartaElemento.addEventListener('touchmove', function (event) {
                                if (endBattle == false) {
                                    if (playerTurn == true && cooldown) {
                                        // Calcula a distância movida no eixo Y
                                        const currentY = event.touches[0].clientY;
                                        movedDistance = startY - currentY;  // Distância movida (em pixels)
                                        if (
                                            (CartaPlayer == null) ||  // Se CartaPlayer for null
                                            (Array.isArray(CartaPlayer) && CartaPlayer.every(carta => carta.tipo === 'ativada'))  // Se for um array e todas as cartas forem do tipo 'ativada'
                                        ) {
                                            // Verifica se o movimento foi maior que 10 cm (aproximadamente 378 pixels)
                                            if (movedDistance >= 150) {
                                                const dataId = cartaElemento.getAttribute('data-id');

                                                let c;
                                                players.Player.cartas.forEach(carta => {
                                                    if (carta.id == dataId) {
                                                        c = carta;
                                                    }
                                                });
                                                if (players.Player.energia >= -c.custoEnergia) {
                                                    setTimeout(() => {
                                                        document.getElementById('cartas-container').style.top = "90%";
                                                    }, 1000);

                                                    cartaElemento.style.position = 'fixed';
                                                    cartaElemento.style.left = "5%";
                                                    cartaElemento.style.opacity = "0";
                                                    cartaElemento.style.marginBottom = "200vh";
                                                    cartaElemento.innerHTML = ""
                                                    setTimeout(() => {

                                                        cartaElemento.style.marginLeft = "0px";
                                                        cartaElemento.style.marginRight = "0px";
                                                        cartaElemento.style.padding = "0px";
                                                        cartaElemento.style.width = "0px";

                                                    }, 2000);
                                                    setTimeout(() => {
                                                        cartaElemento.style.display = "none";
                                                    }, 3000);

                                                    if (!idDasCartasQueForamJogadas.includes(dataId)) {
                                                        players.Player.cartas.forEach(carta => {
                                                            if (carta.id == dataId) {
                                                                document.getElementById('card-player').innerHTML += `
    <div id="sub-card-player-${carta.id}" style="box-sizing: content-box; box-shadow: black 0px 11px 20px 8px; margin-left: ${cartasEmCampo}px; position: absolute; border-radius: 5px ;background: url(card3.jpg); background-size: cover; background-position: center; opacity: 1; transition: 1s all linear; height: 100%; width: 100%; background-color: white; display: flex; justify-content: center; align-items: center; flex-direction: column;">
    <div style="height: 45%; width: 90%; background-image: url(${carta.desc}); background-size: cover; background-position: center; border: 1px solid black; border-radius: 5px;"></div>
    <div style="height: 50%; width: 100%;  background: rgba(0, 0, 0, 0.5); margin-left: 5px; margin-right: 5px; color: white; ">
    ${carta.dano !== undefined && carta.dano < 0 && carta.dano ? `<p style="font-size: 12px; margin: 1px;">${carta.dano}%💔</p>` : ``}
    ${carta.dano !== undefined && carta.dano > 0 && carta.dano ? `<p style="font-size: 12px; margin: 1px;">${carta.dano}%❤️</p>` : ``} 
     ${carta.custoEnergia !== undefined && carta.custoEnergia < 0 && carta.custoEnergia ? `<p style="font-size: 12px; margin: 1px;">${carta.custoEnergia}%⚡</p>` : ``}
    ${carta.custoEnergia !== undefined && carta.custoEnergia > 0 && carta.custoEnergia ? `<p style="font-size: 12px; margin: 1px;">${carta.custoEnergia}%⚡</p>` : ``}   
    </div>
`
                                                                idDasCartasQueForamJogadas.push(dataId);
                                                                setTimeout(() => {

                                                                    document.getElementById(`sub-card-player-${carta.id}`).style.opacity = 1;
                                                                    cartasEmCampo += 40;
                                                                    if (carta.tipo != "ativada") {
                                                                        cartasEmCampo = 0;
                                                                        if (!Array.isArray(CartaPlayer)) {
                                                                            CartaPlayer = carta;
                                                                            playerTurn = false;
                                                                        } else {
                                                                            CartaPlayer.push(carta);
                                                                            playerTurn = false;
                                                                        }

                                                                    } else {
                                                                        if (!Array.isArray(CartaPlayer)) {
                                                                            CartaPlayer = [];  // Se ainda não for um array, inicializa como array vazio
                                                                        }
                                                                        CartaPlayer.push(carta);  // Adiciona a carta ao array
                                                                    }

                                                                }, 500);

                                                            }
                                                        });
                                                    }
                                                } else {
                                                    cartaElemento.style.marginBottom = "30vh";
                                                    setTimeout(() => {
                                                        cartaElemento.style.marginBottom = "0vh";
                                                    }, 100);
                                                }
                                            }
                                        }
                                    }
                                }
                            });
                            cartaElemento.addEventListener('touchend', function (event) {

                            });

                        });
                    } catch (error) {
                        console.error('Erro ao carregar cartas:', error);
                    }
                }
                carregarCartas();
            }
        }

        // alert()
        ;
    </script>
</body>

</html>